// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_communication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_communication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_communication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_communication_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_communication_2eproto;
namespace communication {
class BoardState;
struct BoardStateDefaultTypeInternal;
extern BoardStateDefaultTypeInternal _BoardState_default_instance_;
class BoardsMoves;
struct BoardsMovesDefaultTypeInternal;
extern BoardsMovesDefaultTypeInternal _BoardsMoves_default_instance_;
class startGameCommnad;
struct startGameCommnadDefaultTypeInternal;
extern startGameCommnadDefaultTypeInternal _startGameCommnad_default_instance_;
}  // namespace communication
PROTOBUF_NAMESPACE_OPEN
template<> ::communication::BoardState* Arena::CreateMaybeMessage<::communication::BoardState>(Arena*);
template<> ::communication::BoardsMoves* Arena::CreateMaybeMessage<::communication::BoardsMoves>(Arena*);
template<> ::communication::startGameCommnad* Arena::CreateMaybeMessage<::communication::startGameCommnad>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace communication {

// ===================================================================

class BoardState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.BoardState) */ {
 public:
  inline BoardState() : BoardState(nullptr) {}
  ~BoardState() override;
  explicit PROTOBUF_CONSTEXPR BoardState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardState(const BoardState& from);
  BoardState(BoardState&& from) noexcept
    : BoardState() {
    *this = ::std::move(from);
  }

  inline BoardState& operator=(const BoardState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardState& operator=(BoardState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardState& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardState* internal_default_instance() {
    return reinterpret_cast<const BoardState*>(
               &_BoardState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoardState& a, BoardState& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BoardState& from) {
    BoardState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.BoardState";
  }
  protected:
  explicit BoardState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int64 state = 1;
  void clear_state();
  int64_t state() const;
  void set_state(int64_t value);
  private:
  int64_t _internal_state() const;
  void _internal_set_state(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:communication.BoardState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class BoardsMoves final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.BoardsMoves) */ {
 public:
  inline BoardsMoves() : BoardsMoves(nullptr) {}
  ~BoardsMoves() override;
  explicit PROTOBUF_CONSTEXPR BoardsMoves(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardsMoves(const BoardsMoves& from);
  BoardsMoves(BoardsMoves&& from) noexcept
    : BoardsMoves() {
    *this = ::std::move(from);
  }

  inline BoardsMoves& operator=(const BoardsMoves& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardsMoves& operator=(BoardsMoves&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardsMoves& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardsMoves* internal_default_instance() {
    return reinterpret_cast<const BoardsMoves*>(
               &_BoardsMoves_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoardsMoves& a, BoardsMoves& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardsMoves* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardsMoves* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardsMoves* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardsMoves>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardsMoves& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BoardsMoves& from) {
    BoardsMoves::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardsMoves* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.BoardsMoves";
  }
  protected:
  explicit BoardsMoves(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardStatesFieldNumber = 1,
  };
  // repeated .communication.BoardState boardStates = 1;
  int boardstates_size() const;
  private:
  int _internal_boardstates_size() const;
  public:
  void clear_boardstates();
  ::communication::BoardState* mutable_boardstates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::communication::BoardState >*
      mutable_boardstates();
  private:
  const ::communication::BoardState& _internal_boardstates(int index) const;
  ::communication::BoardState* _internal_add_boardstates();
  public:
  const ::communication::BoardState& boardstates(int index) const;
  ::communication::BoardState* add_boardstates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::communication::BoardState >&
      boardstates() const;

  // @@protoc_insertion_point(class_scope:communication.BoardsMoves)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::communication::BoardState > boardstates_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class startGameCommnad final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.startGameCommnad) */ {
 public:
  inline startGameCommnad() : startGameCommnad(nullptr) {}
  ~startGameCommnad() override;
  explicit PROTOBUF_CONSTEXPR startGameCommnad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startGameCommnad(const startGameCommnad& from);
  startGameCommnad(startGameCommnad&& from) noexcept
    : startGameCommnad() {
    *this = ::std::move(from);
  }

  inline startGameCommnad& operator=(const startGameCommnad& from) {
    CopyFrom(from);
    return *this;
  }
  inline startGameCommnad& operator=(startGameCommnad&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const startGameCommnad& default_instance() {
    return *internal_default_instance();
  }
  static inline const startGameCommnad* internal_default_instance() {
    return reinterpret_cast<const startGameCommnad*>(
               &_startGameCommnad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(startGameCommnad& a, startGameCommnad& b) {
    a.Swap(&b);
  }
  inline void Swap(startGameCommnad* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startGameCommnad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  startGameCommnad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<startGameCommnad>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const startGameCommnad& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const startGameCommnad& from) {
    startGameCommnad::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startGameCommnad* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.startGameCommnad";
  }
  protected:
  explicit startGameCommnad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsAiFieldNumber = 1,
    kAiLevelFieldNumber = 2,
  };
  // bool isAi = 1;
  void clear_isai();
  bool isai() const;
  void set_isai(bool value);
  private:
  bool _internal_isai() const;
  void _internal_set_isai(bool value);
  public:

  // int32 aiLevel = 2;
  void clear_ailevel();
  int32_t ailevel() const;
  void set_ailevel(int32_t value);
  private:
  int32_t _internal_ailevel() const;
  void _internal_set_ailevel(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:communication.startGameCommnad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool isai_;
    int32_t ailevel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoardState

// int64 state = 1;
inline void BoardState::clear_state() {
  _impl_.state_ = int64_t{0};
}
inline int64_t BoardState::_internal_state() const {
  return _impl_.state_;
}
inline int64_t BoardState::state() const {
  // @@protoc_insertion_point(field_get:communication.BoardState.state)
  return _internal_state();
}
inline void BoardState::_internal_set_state(int64_t value) {
  
  _impl_.state_ = value;
}
inline void BoardState::set_state(int64_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:communication.BoardState.state)
}

// -------------------------------------------------------------------

// BoardsMoves

// repeated .communication.BoardState boardStates = 1;
inline int BoardsMoves::_internal_boardstates_size() const {
  return _impl_.boardstates_.size();
}
inline int BoardsMoves::boardstates_size() const {
  return _internal_boardstates_size();
}
inline void BoardsMoves::clear_boardstates() {
  _impl_.boardstates_.Clear();
}
inline ::communication::BoardState* BoardsMoves::mutable_boardstates(int index) {
  // @@protoc_insertion_point(field_mutable:communication.BoardsMoves.boardStates)
  return _impl_.boardstates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::communication::BoardState >*
BoardsMoves::mutable_boardstates() {
  // @@protoc_insertion_point(field_mutable_list:communication.BoardsMoves.boardStates)
  return &_impl_.boardstates_;
}
inline const ::communication::BoardState& BoardsMoves::_internal_boardstates(int index) const {
  return _impl_.boardstates_.Get(index);
}
inline const ::communication::BoardState& BoardsMoves::boardstates(int index) const {
  // @@protoc_insertion_point(field_get:communication.BoardsMoves.boardStates)
  return _internal_boardstates(index);
}
inline ::communication::BoardState* BoardsMoves::_internal_add_boardstates() {
  return _impl_.boardstates_.Add();
}
inline ::communication::BoardState* BoardsMoves::add_boardstates() {
  ::communication::BoardState* _add = _internal_add_boardstates();
  // @@protoc_insertion_point(field_add:communication.BoardsMoves.boardStates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::communication::BoardState >&
BoardsMoves::boardstates() const {
  // @@protoc_insertion_point(field_list:communication.BoardsMoves.boardStates)
  return _impl_.boardstates_;
}

// -------------------------------------------------------------------

// startGameCommnad

// bool isAi = 1;
inline void startGameCommnad::clear_isai() {
  _impl_.isai_ = false;
}
inline bool startGameCommnad::_internal_isai() const {
  return _impl_.isai_;
}
inline bool startGameCommnad::isai() const {
  // @@protoc_insertion_point(field_get:communication.startGameCommnad.isAi)
  return _internal_isai();
}
inline void startGameCommnad::_internal_set_isai(bool value) {
  
  _impl_.isai_ = value;
}
inline void startGameCommnad::set_isai(bool value) {
  _internal_set_isai(value);
  // @@protoc_insertion_point(field_set:communication.startGameCommnad.isAi)
}

// int32 aiLevel = 2;
inline void startGameCommnad::clear_ailevel() {
  _impl_.ailevel_ = 0;
}
inline int32_t startGameCommnad::_internal_ailevel() const {
  return _impl_.ailevel_;
}
inline int32_t startGameCommnad::ailevel() const {
  // @@protoc_insertion_point(field_get:communication.startGameCommnad.aiLevel)
  return _internal_ailevel();
}
inline void startGameCommnad::_internal_set_ailevel(int32_t value) {
  
  _impl_.ailevel_ = value;
}
inline void startGameCommnad::set_ailevel(int32_t value) {
  _internal_set_ailevel(value);
  // @@protoc_insertion_point(field_set:communication.startGameCommnad.aiLevel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_communication_2eproto
