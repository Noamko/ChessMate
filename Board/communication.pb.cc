// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication.proto

#include "communication.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace communication {
PROTOBUF_CONSTEXPR BoardState::BoardState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.state_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoardStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoardStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoardStateDefaultTypeInternal() {}
  union {
    BoardState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoardStateDefaultTypeInternal _BoardState_default_instance_;
PROTOBUF_CONSTEXPR BoardsMoves::BoardsMoves(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.boardstates_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoardsMovesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoardsMovesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoardsMovesDefaultTypeInternal() {}
  union {
    BoardsMoves _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoardsMovesDefaultTypeInternal _BoardsMoves_default_instance_;
PROTOBUF_CONSTEXPR startGameCommnad::startGameCommnad(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isai_)*/false
  , /*decltype(_impl_.ailevel_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct startGameCommnadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR startGameCommnadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~startGameCommnadDefaultTypeInternal() {}
  union {
    startGameCommnad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 startGameCommnadDefaultTypeInternal _startGameCommnad_default_instance_;
}  // namespace communication
static ::_pb::Metadata file_level_metadata_communication_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_communication_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_communication_2eproto = nullptr;

const uint32_t TableStruct_communication_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::communication::BoardState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::communication::BoardState, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::communication::BoardsMoves, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::communication::BoardsMoves, _impl_.boardstates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::communication::startGameCommnad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::communication::startGameCommnad, _impl_.isai_),
  PROTOBUF_FIELD_OFFSET(::communication::startGameCommnad, _impl_.ailevel_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::communication::BoardState)},
  { 7, -1, -1, sizeof(::communication::BoardsMoves)},
  { 14, -1, -1, sizeof(::communication::startGameCommnad)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::communication::_BoardState_default_instance_._instance,
  &::communication::_BoardsMoves_default_instance_._instance,
  &::communication::_startGameCommnad_default_instance_._instance,
};

const char descriptor_table_protodef_communication_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023communication.proto\022\rcommunication\"\033\n\n"
  "BoardState\022\r\n\005state\030\001 \001(\003\"=\n\013BoardsMoves"
  "\022.\n\013boardStates\030\001 \003(\0132\031.communication.Bo"
  "ardState\"1\n\020startGameCommnad\022\014\n\004isAi\030\001 \001"
  "(\010\022\017\n\007aiLevel\030\002 \001(\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_communication_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_communication_2eproto = {
    false, false, 187, descriptor_table_protodef_communication_2eproto,
    "communication.proto",
    &descriptor_table_communication_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_communication_2eproto::offsets,
    file_level_metadata_communication_2eproto, file_level_enum_descriptors_communication_2eproto,
    file_level_service_descriptors_communication_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_communication_2eproto_getter() {
  return &descriptor_table_communication_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_communication_2eproto(&descriptor_table_communication_2eproto);
namespace communication {

// ===================================================================

class BoardState::_Internal {
 public:
};

BoardState::BoardState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:communication.BoardState)
}
BoardState::BoardState(const BoardState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BoardState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:communication.BoardState)
}

inline void BoardState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BoardState::~BoardState() {
  // @@protoc_insertion_point(destructor:communication.BoardState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoardState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoardState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoardState::Clear() {
// @@protoc_insertion_point(message_clear_start:communication.BoardState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:communication.BoardState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:communication.BoardState)
  return target;
}

size_t BoardState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communication.BoardState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BoardState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardState::GetClassData() const { return &_class_data_; }


void BoardState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BoardState*>(&to_msg);
  auto& from = static_cast<const BoardState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:communication.BoardState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardState::CopyFrom(const BoardState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communication.BoardState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardState::IsInitialized() const {
  return true;
}

void BoardState::InternalSwap(BoardState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_communication_2eproto_getter, &descriptor_table_communication_2eproto_once,
      file_level_metadata_communication_2eproto[0]);
}

// ===================================================================

class BoardsMoves::_Internal {
 public:
};

BoardsMoves::BoardsMoves(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:communication.BoardsMoves)
}
BoardsMoves::BoardsMoves(const BoardsMoves& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BoardsMoves* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.boardstates_){from._impl_.boardstates_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:communication.BoardsMoves)
}

inline void BoardsMoves::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.boardstates_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BoardsMoves::~BoardsMoves() {
  // @@protoc_insertion_point(destructor:communication.BoardsMoves)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoardsMoves::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.boardstates_.~RepeatedPtrField();
}

void BoardsMoves::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoardsMoves::Clear() {
// @@protoc_insertion_point(message_clear_start:communication.BoardsMoves)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.boardstates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardsMoves::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .communication.BoardState boardStates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boardstates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardsMoves::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:communication.BoardsMoves)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .communication.BoardState boardStates = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_boardstates_size()); i < n; i++) {
    const auto& repfield = this->_internal_boardstates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:communication.BoardsMoves)
  return target;
}

size_t BoardsMoves::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communication.BoardsMoves)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .communication.BoardState boardStates = 1;
  total_size += 1UL * this->_internal_boardstates_size();
  for (const auto& msg : this->_impl_.boardstates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardsMoves::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BoardsMoves::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardsMoves::GetClassData() const { return &_class_data_; }


void BoardsMoves::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BoardsMoves*>(&to_msg);
  auto& from = static_cast<const BoardsMoves&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:communication.BoardsMoves)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.boardstates_.MergeFrom(from._impl_.boardstates_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardsMoves::CopyFrom(const BoardsMoves& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communication.BoardsMoves)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardsMoves::IsInitialized() const {
  return true;
}

void BoardsMoves::InternalSwap(BoardsMoves* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.boardstates_.InternalSwap(&other->_impl_.boardstates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardsMoves::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_communication_2eproto_getter, &descriptor_table_communication_2eproto_once,
      file_level_metadata_communication_2eproto[1]);
}

// ===================================================================

class startGameCommnad::_Internal {
 public:
};

startGameCommnad::startGameCommnad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:communication.startGameCommnad)
}
startGameCommnad::startGameCommnad(const startGameCommnad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  startGameCommnad* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isai_){}
    , decltype(_impl_.ailevel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.isai_, &from._impl_.isai_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ailevel_) -
    reinterpret_cast<char*>(&_impl_.isai_)) + sizeof(_impl_.ailevel_));
  // @@protoc_insertion_point(copy_constructor:communication.startGameCommnad)
}

inline void startGameCommnad::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isai_){false}
    , decltype(_impl_.ailevel_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

startGameCommnad::~startGameCommnad() {
  // @@protoc_insertion_point(destructor:communication.startGameCommnad)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void startGameCommnad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void startGameCommnad::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void startGameCommnad::Clear() {
// @@protoc_insertion_point(message_clear_start:communication.startGameCommnad)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.isai_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ailevel_) -
      reinterpret_cast<char*>(&_impl_.isai_)) + sizeof(_impl_.ailevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* startGameCommnad::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isAi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isai_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 aiLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ailevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* startGameCommnad::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:communication.startGameCommnad)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAi = 1;
  if (this->_internal_isai() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isai(), target);
  }

  // int32 aiLevel = 2;
  if (this->_internal_ailevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ailevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:communication.startGameCommnad)
  return target;
}

size_t startGameCommnad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communication.startGameCommnad)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isAi = 1;
  if (this->_internal_isai() != 0) {
    total_size += 1 + 1;
  }

  // int32 aiLevel = 2;
  if (this->_internal_ailevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ailevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData startGameCommnad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    startGameCommnad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*startGameCommnad::GetClassData() const { return &_class_data_; }


void startGameCommnad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<startGameCommnad*>(&to_msg);
  auto& from = static_cast<const startGameCommnad&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:communication.startGameCommnad)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isai() != 0) {
    _this->_internal_set_isai(from._internal_isai());
  }
  if (from._internal_ailevel() != 0) {
    _this->_internal_set_ailevel(from._internal_ailevel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void startGameCommnad::CopyFrom(const startGameCommnad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communication.startGameCommnad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool startGameCommnad::IsInitialized() const {
  return true;
}

void startGameCommnad::InternalSwap(startGameCommnad* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(startGameCommnad, _impl_.ailevel_)
      + sizeof(startGameCommnad::_impl_.ailevel_)
      - PROTOBUF_FIELD_OFFSET(startGameCommnad, _impl_.isai_)>(
          reinterpret_cast<char*>(&_impl_.isai_),
          reinterpret_cast<char*>(&other->_impl_.isai_));
}

::PROTOBUF_NAMESPACE_ID::Metadata startGameCommnad::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_communication_2eproto_getter, &descriptor_table_communication_2eproto_once,
      file_level_metadata_communication_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace communication
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::communication::BoardState*
Arena::CreateMaybeMessage< ::communication::BoardState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::communication::BoardState >(arena);
}
template<> PROTOBUF_NOINLINE ::communication::BoardsMoves*
Arena::CreateMaybeMessage< ::communication::BoardsMoves >(Arena* arena) {
  return Arena::CreateMessageInternal< ::communication::BoardsMoves >(arena);
}
template<> PROTOBUF_NOINLINE ::communication::startGameCommnad*
Arena::CreateMaybeMessage< ::communication::startGameCommnad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::communication::startGameCommnad >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
